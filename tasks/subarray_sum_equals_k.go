package tasks

/*
Задача:
	Дан массив nums и число k, вернуть число подмассивов, сумма элементов которых равна k.
	Подмассив - это непрерывная непустая последовательность элементов внутри массива
Пример:
	Input: nums = [1,1,1], k = 2
	Output: 2

	Input: nums = [1,2,3], k = 3
	Output: 2
*/
func SubarraySum(nums []int, k int) int {
	var sum int
	var count int

	/*
	Идея решения:
		Мы можем выразить k через разницу между двумя суммами Σj и Σi, 
		где сумма Σx - это сумма всех элементов с начала массива до элемента с номером x.
		Следовательно:
			Мы суммируем элементы массива последовательно в цикле, получая Σj - сумму элементов до рассматриваемого элемента,
			таким образом мы получаем все значения Σx, среди которых Σj и Σi.
			Нужно не забывать что нам надо проверить сколько раз мы уже набирали Σx = (Σj — k) - именно столько подмассивов нужно добавить к текущему результату.
	*/
	var preMap = make(map[int]int) // мапа частотности каждой промежуточной суммы

	preMap[0] = 1 // учитываем случай, когда подмассив начинается с 0
	for i := 0; i < len(nums); i++ {
		// считаем префиксную сумму
		sum = sum + nums[i]

		// находим недостающее значение до k 
		rem := sum - k

		// если такой элемент есть в мапе, то прибавляем к счетчику число таких элементов
		if _, ok := preMap[rem]; ok {
			count += preMap[rem]
		}
		// увеличиваем счетчик 
		preMap[sum]++
	}

	return count
}