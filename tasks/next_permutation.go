package tasks

/*
Вводные данные:
	Пересстановка массива целых чисел - расположение его членов в последовательности или линейном порядке
	Например, для arr = [1,2,3], все следующие перестановки: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].

	Следующая перестановка целых чисел - это следующая лексикографически бОльшая перестановка его целого числа. Более формально,
	если все перестановки массива отсортированы в одном контейнере в соответствии с их лексикографическим порядком, то следующей перестановкой
	этого массива является та перестановка, которая следует за ним в отсортированном контейнере. Если такое расположение невозможно, то массив
	должен быть пересортирован в наименьшем возможном порядке (то есть отсортирован по возрастанию).

	Например, для arr = [1, 2, 3], следующая перестановка это [1, 3, 2],
	для arr = [2,3,1] это [3,1,2]

Задача:
	Найти следующую перестановку числа
	Память - O(1)

Объяснение решения: https://habr.com/ru/articles/428552/
*/
func NextPermutation(nums []int) {
    length := len(nums)
    var peakIndex int = length-1
    var largeIndex int = length-1

	// находим первую вершину
    for ; peakIndex > 0; peakIndex-- {
        if nums[peakIndex-1] < nums[peakIndex] {
            break
        }
    }

	// находим первый элемент справа от вершины, который больше первого элемента слева от вершины и меняем местами
    if peakIndex != 0 {
        for ; largeIndex >= peakIndex; largeIndex-- {
            if nums[peakIndex-1] < nums[largeIndex] {
                // Swap the elements, peakIndex-1 & largeIndex.
                nums[largeIndex], nums[peakIndex-1] = nums[peakIndex-1], nums[largeIndex]
                break
            }
        }
    }

	// меняем местами все элементы, лежащие между вершиной и последним индексом массива
    for i:=length-1; i>peakIndex; i, peakIndex = i-1, peakIndex+1 {
        nums[i], nums[peakIndex] = nums[peakIndex], nums[i]
    }
}
