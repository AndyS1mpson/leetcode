package tasks

import "strings"

/*
Задача:

	Дан абсолютный путь в Unix-системе, который всегда начинается с '/'.
	Задача в том чтобы привести его к упрощенному каноническому пути.

	Правила в Unix системе следующие:
		- Точка '.' означает текущую директорию
		- '..' означает предыдущую директорию
		- Несколько последовательных косых черт, таких как '//' и '///', рассматриваются как одна косая черта '/'.
		- Любая последовательность периодов, не соответствующая приведенным выше правилам, должна рассматриваться как правильное имя каталога или файла.
		  Например, '...' и '....' являются допустимыми именами каталогов или файлов.


	Упрощенный канонический путь должен соответствовать следующим правилам:
		- Путь должен начинаться с одной косой черты '/'.
		- Каталоги внутри пути должны быть разделены ровно одной косой чертой '/'.
		- Путь не должен заканчиваться косой чертой '/', если только это не корневой каталог.
		- Путь не должен содержать одинарных или двойных периодов ('.' и '.'), используемых для обозначения текущих или родительских каталогов.

Пример:

	Input: path = "/home/"
	Output: "/home"

	Input: path = "/home//foo/"
	Output: "/home/foo"

	Input: path = "/home/user/Documents/../Pictures"
	Output: "/home/user/Pictures"

	Input: path = "/../"
	Output: "/"
*/
func SimplifyPath(path string) string {
	simplifiedPath := make([]string, 0)
	dirs := strings.Split(path, "/")

	for _, dir := range dirs {
		if dir == "" || dir == "." {
			continue
		}
		if dir != ".." {
			simplifiedPath = append(simplifiedPath, dir)
		} else if len(simplifiedPath) > 0 {
			simplifiedPath = simplifiedPath[:len(simplifiedPath)-1]
		}
	}

	return "/" + strings.Join(simplifiedPath, "/")
}
