package tasks

import "math"

/*
Задача:

	Дан массив чисел nums, нужно найти непрерывный подмассив,
	что если отсортировать этот подмассив в неубывающем порядке,
	то весь массив будет отсортирован в неубывающем порядке

	Вернуть длину такого подмассива

Пример:

	Input: nums = [2,6,7,4,8,10,9,15]
	Output: 6
	Explanation: Нужно отсортировать [6, 7, 4, 8, 10, 9] в неубывающем порядке чтобы весь массив был отсортирован.

Сложность:
*/
func FindUnsortedSubarray(nums []int) int {
	if len(nums) == 0 {
		return 0
	}

	low, high := 0, len(nums)-1

	// находим первый элемент который больше предыдущего
	for low < len(nums)-1 && nums[low] <= nums[low+1] {
		low++
	}

	if low == len(nums)-1 {
		return 0
	}

	// находим последний элемент который меньше следующего
	for high > 0 && nums[high] >= nums[high-1] {
		high--
	}

	subMin := math.MaxInt
	subMax := math.MinInt

	for i := low; i <= high; i++ {
		// находим минимальный элемент внутри рассматриваемого подмассива
		if nums[i] < subMin {
			subMin = nums[i]
		}

		// находим максимальный элемент внутри рассматриваемого подмассива
		if nums[i] > subMax {
			subMax = nums[i]
		}
	}

	// расширяем подмассив слева пока не встретим элемент который меньше найденого минимального
	for low > 0 && nums[low-1] > subMin {
		low--
	}

	// расширяем подмассив справа пока не встретим элемент который больше найденого максимального
	for high < len(nums)-1 && nums[high+1] < subMax {
		high++
	}

	return high - low + 1
}
